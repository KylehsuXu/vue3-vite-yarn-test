{"version":3,"file":"radio-group.vue_vue&type=template&id=53ef81f9&lang.js","sources":["../../../../../../packages/components/radio/src/radio-group.vue?vue&type=template&id=53ef81f9&lang.js"],"sourcesContent":["<template>\n  <div\n    ref=\"radioGroup\"\n    class=\"el-radio-group\"\n    role=\"radiogroup\"\n    @keydown=\"handleKeydown\"\n  >\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  nextTick,\n  computed,\n  provide,\n  onMounted,\n  inject,\n  ref,\n  reactive,\n  toRefs,\n  watch,\n} from 'vue'\nimport { EVENT_CODE } from '@element-plus/utils/aria'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { isValidComponentSize } from '@element-plus/utils/validators'\nimport { elFormItemKey } from '@element-plus/tokens'\nimport radioGroupKey from './token'\n\nimport type { PropType } from 'vue'\nimport type { ElFormItemContext } from '@element-plus/tokens'\nimport type { ComponentSize } from '@element-plus/utils/types'\n\nexport default defineComponent({\n  name: 'ElRadioGroup',\n\n  componentName: 'ElRadioGroup',\n\n  props: {\n    modelValue: {\n      type: [String, Number, Boolean],\n      default: '',\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    fill: {\n      type: String,\n      default: '',\n    },\n    textColor: {\n      type: String,\n      default: '',\n    },\n    disabled: Boolean,\n  },\n\n  emits: [UPDATE_MODEL_EVENT, 'change'],\n\n  setup(props, ctx) {\n    const radioGroup = ref(null)\n\n    const elFormItem = inject(elFormItemKey, {} as ElFormItemContext)\n\n    const radioGroupSize = computed<ComponentSize>(() => {\n      return props.size || elFormItem.size\n    })\n\n    // methods\n    const changeEvent = (value) => {\n      ctx.emit(UPDATE_MODEL_EVENT, value)\n      nextTick(() => {\n        ctx.emit('change', value)\n      })\n    }\n\n    provide(\n      radioGroupKey,\n      reactive({\n        name: 'ElRadioGroup',\n        ...toRefs(props),\n        radioGroupSize,\n        changeEvent,\n      } as any)\n    )\n\n    watch(\n      () => props.modelValue,\n      () => {\n        elFormItem.validate?.('change')\n      }\n    )\n\n    const handleKeydown = (e) => {\n      // 左右上下按键 可以在radio组内切换不同选项\n      const target = e.target\n      const className =\n        target.nodeName === 'INPUT' ? '[type=radio]' : '[role=radio]'\n      const radios = radioGroup.value.querySelectorAll(className)\n      const length = radios.length\n      const index = Array.from(radios).indexOf(target)\n      const roleRadios = radioGroup.value.querySelectorAll('[role=radio]')\n      let nextIndex = null\n      switch (e.code) {\n        case EVENT_CODE.left:\n        case EVENT_CODE.up:\n          e.stopPropagation()\n          e.preventDefault()\n          nextIndex = index === 0 ? length - 1 : index - 1\n          break\n        case EVENT_CODE.right:\n        case EVENT_CODE.down:\n          e.stopPropagation()\n          e.preventDefault()\n          nextIndex = index === length - 1 ? 0 : index + 1\n          break\n        default:\n          break\n      }\n      if (nextIndex === null) return\n      roleRadios[nextIndex].click()\n      roleRadios[nextIndex].focus()\n    }\n\n    onMounted(() => {\n      const radios = radioGroup.value.querySelectorAll('[type=radio]')\n      const firstLabel = radios[0]\n      if (\n        !Array.from(radios).some((radio: HTMLInputElement) => radio.checked) &&\n        firstLabel\n      ) {\n        firstLabel.tabIndex = 0\n      }\n    })\n    return {\n      handleKeydown,\n      radioGroupSize,\n      radioGroup,\n    }\n  },\n})\n</script>\n"],"names":["_createElementBlock","_renderSlot"],"mappings":";;;;;;;0BACEA;IACE,KAAI;AAAA,IACJ,OAAM;AAAA,IACN,MAAK;AAAA,IACJ,kDAAS;;IAEVC;;;;;;"}