{"version":3,"file":"radio.vue_vue&type=template&id=6aa3dfc7&lang.js","sources":["../../../../../../packages/components/radio/src/radio.vue?vue&type=template&id=6aa3dfc7&lang.js"],"sourcesContent":["<template>\n  <label\n    class=\"el-radio\"\n    :class=\"{\n      [`el-radio--${radioSize || ''}`]: radioSize,\n      'is-disabled': isDisabled,\n      'is-focus': focus,\n      'is-bordered': border,\n      'is-checked': model === label,\n    }\"\n    role=\"radio\"\n    :aria-checked=\"model === label\"\n    :aria-disabled=\"isDisabled\"\n    :tabindex=\"tabIndex\"\n    @keydown.space.stop.prevent=\"model = isDisabled ? model : label\"\n  >\n    <span\n      class=\"el-radio__input\"\n      :class=\"{\n        'is-disabled': isDisabled,\n        'is-checked': model === label,\n      }\"\n    >\n      <span class=\"el-radio__inner\"></span>\n      <input\n        ref=\"radioRef\"\n        v-model=\"model\"\n        class=\"el-radio__original\"\n        :value=\"label\"\n        type=\"radio\"\n        aria-hidden=\"true\"\n        :name=\"name\"\n        :disabled=\"isDisabled\"\n        tabindex=\"-1\"\n        @focus=\"focus = true\"\n        @blur=\"focus = false\"\n        @change=\"handleChange\"\n      />\n    </span>\n    <span class=\"el-radio__label\" @keydown.stop>\n      <slot>\n        {{ label }}\n      </slot>\n    </span>\n  </label>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, nextTick, ref } from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { isValidComponentSize } from '@element-plus/utils/validators'\nimport { useRadio, useRadioAttrs } from './useRadio'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/utils/types'\n\nexport default defineComponent({\n  name: 'ElRadio',\n  componentName: 'ElRadio',\n\n  props: {\n    modelValue: {\n      type: [String, Number, Boolean],\n      default: '',\n    },\n    label: {\n      type: [String, Number, Boolean],\n      default: '',\n    },\n    disabled: Boolean,\n    name: {\n      type: String,\n      default: '',\n    },\n    border: Boolean,\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n  },\n\n  emits: [UPDATE_MODEL_EVENT, 'change'],\n\n  setup(props, ctx) {\n    const { isGroup, radioGroup, elFormItemSize, ELEMENT, focus, elForm } =\n      useRadio()\n\n    const radioRef = ref<HTMLInputElement>()\n    const model = computed<string | number | boolean>({\n      get() {\n        return isGroup.value ? radioGroup.modelValue : props.modelValue\n      },\n      set(val) {\n        if (isGroup.value) {\n          radioGroup.changeEvent(val)\n        } else {\n          ctx.emit(UPDATE_MODEL_EVENT, val)\n        }\n        radioRef.value.checked = props.modelValue === props.label\n      },\n    })\n\n    const { tabIndex, isDisabled } = useRadioAttrs(props, {\n      isGroup,\n      radioGroup,\n      elForm,\n      model,\n    })\n\n    const radioSize = computed(() => {\n      const temRadioSize = props.size || elFormItemSize.value || ELEMENT.size\n      return isGroup.value\n        ? radioGroup.radioGroupSize || temRadioSize\n        : temRadioSize\n    })\n\n    function handleChange() {\n      nextTick(() => {\n        ctx.emit('change', model.value)\n      })\n    }\n\n    return {\n      focus,\n      isGroup,\n      isDisabled,\n      model,\n      tabIndex,\n      radioSize,\n      handleChange,\n      radioRef,\n    }\n  },\n})\n</script>\n"],"names":["_createElementBlock","_createElementVNode","_renderSlot"],"mappings":";;;;;;;oEAuBY,OAAM;;;0BAtBhBA;IACE,2BAAM;;;;;;;IAQN,MAAK;AAAA,IACJ,gBAAc,eAAU;IACxB,iBAAe;IACf,UAAU;IACV,gFAA4B,aAAQ,kBAAa,aAAQ;;IAE1DC;MACE,2BAAM;;;;;MAMN;AAAA,yBACAA;QACE,KAAI;AAAA,qEACK;QACT,OAAM;AAAA,QACL,OAAO;QACR,MAAK;AAAA,QACL,eAAY;AAAA,QACX,MAAM;QACN,UAAU;QACX,UAAS;AAAA,QACR,+CAAO;QACP,8CAAM;QACN,iDAAQ;;0BAVA;;;IAabA;MAAM,OAAM;AAAA,MAAmB,uDAAD;;;MAC5BC,2CAAA;gDACK;;;;;;;;"}