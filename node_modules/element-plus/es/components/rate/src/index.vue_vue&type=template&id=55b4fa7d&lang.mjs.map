{"version":3,"file":"index.vue_vue&type=template&id=55b4fa7d&lang.mjs","sources":["../../../../../../packages/components/rate/src/index.vue?vue&type=template&id=55b4fa7d&lang.js"],"sourcesContent":["<template>\n  <div\n    class=\"el-rate\"\n    role=\"slider\"\n    :aria-valuenow=\"currentValue\"\n    :aria-valuetext=\"text\"\n    aria-valuemin=\"0\"\n    :aria-valuemax=\"max\"\n    tabindex=\"0\"\n    @keydown=\"handleKey\"\n  >\n    <span\n      v-for=\"(item, key) in max\"\n      :key=\"key\"\n      class=\"el-rate__item\"\n      :style=\"{ cursor: rateDisabled ? 'auto' : 'pointer' }\"\n      @mousemove=\"setCurrentValue(item, $event)\"\n      @mouseleave=\"resetCurrentValue\"\n      @click=\"selectValue(item)\"\n    >\n      <el-icon\n        :class=\"[{ hover: hoverIndex === item }]\"\n        class=\"el-rate__icon\"\n        :style=\"getIconStyle(item)\"\n      >\n        <component :is=\"iconComponents[item - 1]\" />\n        <el-icon\n          v-if=\"showDecimalIcon(item)\"\n          :style=\"decimalStyle\"\n          class=\"el-rate__icon el-rate__decimal\"\n        >\n          <component :is=\"decimalIconComponent\" />\n        </el-icon>\n      </el-icon>\n    </span>\n    <span\n      v-if=\"showText || showScore\"\n      class=\"el-rate__text\"\n      :style=\"{ color: textColor }\"\n      >{{ text }}</span\n    >\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, inject, computed, ref, watch } from 'vue'\nimport { isObject, isArray } from '@vue/shared'\nimport { elFormKey } from '@element-plus/tokens'\nimport { hasClass } from '@element-plus/utils/dom'\nimport { EVENT_CODE } from '@element-plus/utils/aria'\n\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { StarFilled, Star } from '@element-plus/icons'\nimport type { PropType, Component } from 'vue'\nimport type { ElFormContext } from '@element-plus/tokens'\n\nexport default defineComponent({\n  name: 'ElRate',\n  components: { ElIcon, StarFilled, Star },\n  props: {\n    modelValue: {\n      type: Number,\n      default: 0,\n    },\n    lowThreshold: {\n      type: Number,\n      default: 2,\n    },\n    highThreshold: {\n      type: Number,\n      default: 4,\n    },\n    max: {\n      type: Number,\n      default: 5,\n    },\n    colors: {\n      type: [Array, Object],\n      default: () => ['#F7BA2A', '#F7BA2A', '#F7BA2A'],\n    },\n    voidColor: {\n      type: String,\n      default: '#C6D1DE',\n    },\n    disabledVoidColor: {\n      type: String,\n      default: '#EFF2F7',\n    },\n    icons: {\n      type: [Array, Object] as PropType<string[] | Component>,\n      default: () => [StarFilled, StarFilled, StarFilled],\n    },\n    voidIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: Star,\n    },\n    disabledvoidIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: StarFilled,\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    allowHalf: {\n      type: Boolean,\n      default: false,\n    },\n    showText: {\n      type: Boolean,\n      default: false,\n    },\n    showScore: {\n      type: Boolean,\n      default: false,\n    },\n    textColor: {\n      type: String,\n      default: '#1f2d3d',\n    },\n    texts: {\n      type: Array as PropType<string[]>,\n      default: () => [\n        'Extremely bad',\n        'Disappointed',\n        'Fair',\n        'Satisfied',\n        'Surprise',\n      ],\n    },\n    scoreTemplate: {\n      type: String,\n      default: '{value}',\n    },\n  },\n  emits: [UPDATE_MODEL_EVENT, 'change'],\n  setup(props, { emit }) {\n    const elForm = inject(elFormKey, {} as ElFormContext)\n\n    const currentValue = ref(props.modelValue)\n\n    const rateDisabled = computed(() => props.disabled || elForm.disabled)\n\n    const text = computed(() => {\n      let result = ''\n      if (props.showScore) {\n        result = props.scoreTemplate.replace(\n          /\\{\\s*value\\s*\\}/,\n          rateDisabled.value ? `${props.modelValue}` : `${currentValue.value}`\n        )\n      } else if (props.showText) {\n        result = props.texts[Math.ceil(currentValue.value) - 1]\n      }\n      return result\n    })\n\n    function getValueFromMap(value: unknown, map: Record<string, unknown>) {\n      const matchedKeys = Object.keys(map)\n        .filter((key) => {\n          const val = map[key]\n          const excluded = isObject(val) ? val.excluded : false\n          return excluded ? value < key : value <= key\n        })\n        .sort((a: never, b: never) => a - b)\n      const matchedValue = map[matchedKeys[0]]\n      return isObject(matchedValue)\n        ? matchedValue.value || matchedValue\n        : matchedValue || ''\n    }\n\n    const valueDecimal = computed(\n      () => props.modelValue * 100 - Math.floor(props.modelValue) * 100\n    )\n    const colorMap = computed(() =>\n      isArray(props.colors)\n        ? {\n            [props.lowThreshold]: props.colors[0],\n            [props.highThreshold]: { value: props.colors[1], excluded: true },\n            [props.max]: props.colors[2],\n          }\n        : props.colors\n    )\n    const activeColor = computed(() =>\n      getValueFromMap(currentValue.value, colorMap.value)\n    )\n    const decimalStyle = computed(() => {\n      let width = ''\n      if (rateDisabled.value) {\n        width = `${valueDecimal.value}%`\n      } else if (props.allowHalf) {\n        width = '50%'\n      }\n      return {\n        color: activeColor.value,\n        width,\n      }\n    })\n\n    const componentMap = computed(() =>\n      isArray(props.icons)\n        ? {\n            [props.lowThreshold]: props.icons[0],\n            [props.highThreshold]: {\n              value: props.icons[1],\n              excluded: true,\n            },\n            [props.max]: props.icons[2],\n          }\n        : props.icons\n    )\n\n    const decimalIconComponent = computed(() =>\n      getValueFromMap(props.modelValue, componentMap.value)\n    )\n    const voidComponent = computed(() =>\n      rateDisabled.value ? props.disabledvoidIcon : props.voidIcon\n    )\n    const activeComponent = computed(() =>\n      getValueFromMap(currentValue.value, componentMap.value)\n    )\n    const iconComponents = computed(() => {\n      const result = Array(props.max)\n      const threshold = currentValue.value\n      // if (props.allowHalf && currentValue.value !== Math.floor(currentValue.value)) {\n      //   threshold--\n      // }\n      result.fill(activeComponent.value, 0, threshold)\n      result.fill(voidComponent.value, threshold, props.max)\n      return result\n    })\n\n    const pointerAtLeftHalf = ref(true)\n    watch(\n      () => props.modelValue,\n      (val) => {\n        currentValue.value = val\n        pointerAtLeftHalf.value =\n          props.modelValue !== Math.floor(props.modelValue)\n      }\n    )\n\n    function showDecimalIcon(item: number) {\n      const showWhenDisabled =\n        rateDisabled.value &&\n        valueDecimal.value > 0 &&\n        item - 1 < props.modelValue &&\n        item > props.modelValue\n      /* istanbul ignore next */\n      const showWhenAllowHalf =\n        props.allowHalf &&\n        pointerAtLeftHalf.value &&\n        item - 0.5 <= currentValue.value &&\n        item > currentValue.value\n      return showWhenDisabled || showWhenAllowHalf\n    }\n\n    function getIconStyle(item: number) {\n      const voidColor = rateDisabled.value\n        ? props.disabledVoidColor\n        : props.voidColor\n      return {\n        color: item <= currentValue.value ? activeColor.value : voidColor,\n      }\n    }\n\n    function selectValue(value: number) {\n      if (rateDisabled.value) {\n        return\n      }\n      if (props.allowHalf && pointerAtLeftHalf.value) {\n        emit(UPDATE_MODEL_EVENT, currentValue.value)\n        if (props.modelValue !== currentValue.value) {\n          emit('change', currentValue.value)\n        }\n      } else {\n        emit(UPDATE_MODEL_EVENT, value)\n        if (props.modelValue !== value) {\n          emit('change', value)\n        }\n      }\n    }\n\n    function handleKey(e: KeyboardEvent) {\n      if (rateDisabled.value) {\n        return\n      }\n      let _currentValue = currentValue.value\n      const code = e.code\n      if (code === EVENT_CODE.up || code === EVENT_CODE.right) {\n        if (props.allowHalf) {\n          _currentValue += 0.5\n        } else {\n          _currentValue += 1\n        }\n        e.stopPropagation()\n        e.preventDefault()\n      } else if (code === EVENT_CODE.left || code === EVENT_CODE.down) {\n        if (props.allowHalf) {\n          _currentValue -= 0.5\n        } else {\n          _currentValue -= 1\n        }\n        e.stopPropagation()\n        e.preventDefault()\n      }\n      _currentValue = _currentValue < 0 ? 0 : _currentValue\n      _currentValue = _currentValue > props.max ? props.max : _currentValue\n      emit(UPDATE_MODEL_EVENT, _currentValue)\n      emit('change', _currentValue)\n      return _currentValue\n    }\n\n    const hoverIndex = ref(-1)\n\n    function setCurrentValue(value: number, event: MouseEvent) {\n      if (rateDisabled.value) {\n        return\n      }\n      /* istanbul ignore if */\n      if (props.allowHalf) {\n        let target = event.target as HTMLElement\n        if (hasClass(target, 'el-rate__item')) {\n          target = target.querySelector('.el-rate__icon')\n        }\n        if (target.clientWidth === 0 || hasClass(target, 'el-rate__decimal')) {\n          target = target.parentNode as HTMLElement\n        }\n        pointerAtLeftHalf.value = event.offsetX * 2 <= target.clientWidth\n        currentValue.value = pointerAtLeftHalf.value ? value - 0.5 : value\n      } else {\n        currentValue.value = value\n      }\n      hoverIndex.value = value\n    }\n\n    function resetCurrentValue() {\n      if (rateDisabled.value) {\n        return\n      }\n      if (props.allowHalf) {\n        pointerAtLeftHalf.value =\n          props.modelValue !== Math.floor(props.modelValue)\n      }\n      currentValue.value = props.modelValue\n      hoverIndex.value = -1\n    }\n\n    if (!props.modelValue) {\n      emit(UPDATE_MODEL_EVENT, 0)\n    }\n    return {\n      hoverIndex,\n\n      currentValue,\n      rateDisabled,\n      text,\n      decimalStyle,\n      decimalIconComponent,\n      iconComponents,\n\n      showDecimalIcon,\n      getIconStyle,\n      selectValue,\n      handleKey,\n      setCurrentValue,\n      resetCurrentValue,\n    }\n  },\n})\n</script>\n"],"names":["_createElementBlock","_createVNode","_createBlock"],"mappings":";;;;;;sBACEA;IACE,OAAM;AAAA,IACN,MAAK;AAAA,IACJ,iBAAe;IACf,kBAAgB;IACjB,iBAAc;AAAA,IACb,iBAAe;IAChB,UAAS;AAAA,IACR,kDAAS;;sBAEVA,8CACwB,WAAd,MAAM;0BADhBA;QAEG;AAAA,QACD,OAAM;AAAA,QACL,gCAAiB;QACjB,yBAAW,qBAAgB,MAAM;AAAA,QACjC,qDAAY;QACZ,qBAAO,iBAAY;AAAA;QAEpBC;UACG,iCAAiB,oBAAe,SAC3B;AAAA,UACL,sBAAO,kBAAa;AAAA;2BAErB;0BAAAC,oCAAgB,oBAAe;YAEvB,qBAAgB,sBADxBA;;cAEG,sBAAO;cACR,OAAM;AAAA;+BAEN;8BAAAA,oCAAgB;;;;;;;;;IAKd,iBAAY,+BADpBF;;MAEE,OAAM;AAAA,MACL,+BAAgB;uBACb;;;;;;"}